# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'tampilan.ui'
#
# Created by: PyQt5 UI code generator 5.11.3
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
from main import *
from general import *
import shutil
import time
import multiprocessing
from queue import *


class WriteStream(object):
    def __init__(self, queue):
        self.queue = queue

    def write(self, text):
        self.queue.put(text)

class MyReceiver(QtCore.QObject):
    mysignal = QtCore.pyqtSignal(str)

    def __init__(self, queue,*args,**kwargs):
        QtCore.QObject.__init__(self,*args,**kwargs)
        self.queue = queue

    @QtCore.pyqtSlot()
    def run(self):
        while True:
            text = self.queue.get()
            self.mysignal.emit(text)

class LongRunningThing(QtCore.QObject):
    @QtCore.pyqtSlot()
    def run(self):
        for i in range(1000):
            print (i)

class Ui_MainWindow(object):

    def __init__(self):
        #self.stream()
        pass

    def stream(self):
        pass
        #sys.stdout = stream(textWrite=self.inputText)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(760, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 30, 661, 19))
        self.label.setObjectName("label")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(20, 60, 721, 27))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(20, 160, 301, 27))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(20, 280, 721, 281))
        self.textEdit.setObjectName("textEdit")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(20, 200, 88, 27))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(120, 200, 88, 27))
        self.pushButton_2.setObjectName("pushButton_2")
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setEnabled(True)
        self.progressBar.setGeometry(QtCore.QRect(20, 240, 721, 23))
        self.progressBar.setAutoFillBackground(False)
        self.progressBar.setProperty("value", 24)
        self.progressBar.setTextVisible(False)
        self.progressBar.setObjectName("progressBar")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(220, 200, 88, 27))
        self.pushButton_3.setObjectName("pushButton_3")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(20, 130, 571, 19))
        self.label_2.setObjectName("label_2")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(330, 160, 101, 27))
        self.pushButton_4.setObjectName("pushButton_4")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setEnabled(False)
        self.lineEdit_3.setGeometry(QtCore.QRect(440, 160, 301, 27))
        self.lineEdit_3.setObjectName("lineEdit_3")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.pushButton.clicked.connect(self.start_thread)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Assessment Tools Web Apps Testing Aplication"))
        self.label.setText(_translate("MainWindow", "Input ULR / Ip address target : (URL website must with http:// or https://) "))
        self.pushButton.setText(_translate("MainWindow", "Attack"))
        self.pushButton_2.setText(_translate("MainWindow", "Log"))
        self.pushButton_3.setText(_translate("MainWindow", "Exit"))
        self.label_2.setText(_translate("MainWindow", "Enter your project name and folder destination to save your project :"))
        self.pushButton_4.setText(_translate("MainWindow", "Select folder"))

    def attack_clk(self):
        alamatURL = self.lineEdit.text()
        prName = self.lineEdit_2.text()
        if alamatURL[0:8] == "https://" or alamatURL[0:7] == "http://":
            cek = cek_server(get_sub_domain_name(alamatURL))
            if cek == True:
                if os.path.exists(prName):
                    reply = self.messageBoxYesNo("Warning", "The project you want to save already exists. Do you want to delete it ?")
                    if reply == True:
                        try:
                            shutil.rmtree(prName)
                            if os.path.exists(prName):
                                self.showMessageBox("Warning", "can not delete the folder. please cek your folder or file")
                            else:
                                print("Yes")
                        except:
                            self.showMessageBox("Warning", "can not delete the folder. please cek your folder or file")
                    elif reply == False:
                        print("No") #pass
                else:
                    #MainCrawl(alamatURL, prName)
                    print("masuk")
            else:
                self.showMessageBox("Warning", "Server is Down")
        else:
            self.showMessageBox("Warning", "dont contain https:// or http://")

    def attack(self):
        i = 0
        while i < 10:
            #self.textEdit.append("attack")
            i = i + 1
            print(i)
            time.sleep(1)
            #sys.stdout.flush()

    def showMessageBox(self, title, message):
        mesBox = QtWidgets.QMessageBox()
        mesBox.setIcon(QtWidgets.QMessageBox.Warning)
        mesBox.setWindowTitle(title)
        mesBox.setText(message)
        mesBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
        mesBox.exec_()

    def messageBoxYesNo(self, title, message):
        mesBox = QtWidgets.QMessageBox.question(QtWidgets.QMessageBox(), title, message, QMessageBox.Ok | QMessageBox.No, QtWidgets.QMessageBox.No)
        if mesBox == QtWidgets.QMessageBox.Ok:
            return True
        elif mesBox == QtWidgets.QMessageBox.No:
            return False
        mesBox.exec_()

    def __del__(self):
        sys.stdout = sys.__stdout__

    @QtCore.pyqtSlot(str)
    def append_text(self, text):
        self.textEdit.insertPlainText(text)

    @QtCore.pyqtSlot()
    def start_thread(self):
        self.thread = QtCore.QThread()
        self.long_running_thing = LongRunningThing()
        self.long_running_thing.moveToThread(self.thread)
        self.thread.started.connect(self.long_running_thing.run)
        self.thread.start()



class stream(QtCore.QObject):
    textWrite = QtCore.pyqtSignal(str)

    def write(self, text):
        self.textWrite.emit(str(text))

if __name__ == "__main__":
    import sys

    queue = Queue()
    sys.stdout = WriteStream(queue)



    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()

    thread = QtCore.QThread()
    my_receiver = MyReceiver(queue)
    my_receiver.mysignal.connect(app.append_text)
    my_receiver.moveToThread(thread)
    thread.started.connect(my_receiver.run)
    thread.start()

    sys.exit(app.exec_())

