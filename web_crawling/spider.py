from general import *
from bs4 import BeautifulSoup
from urllib import parse


class Spider:

    def __init__(self, path, base_url, domain_name):
        self.path = path
        self.base_url = base_url
        self.domain_name = domain_name
        self.queue_file = self.path + '/queue.txt'
        self.crawled_file = self.path + '/crawled.txt'
        self.queue = set()
        self.crawled = set()
        self.boot()
        self.crawl_page('First Spider', self.base_url)

    def boot(self):
        create_data_file(self.path, self.base_url)
        self.queue = file_to_set(self.queue_file)
        self.crawled = file_to_set(self.crawled_file)

    def crawl_page(self, thread_name, page_url):
        if page_url not in self.crawled:
            print(thread_name + ' new crawling ' + page_url)
            ('Queue ' + str(len(self.queue)) + ' | Crawled ' + str(len(self.crawled)))
            self.add_link_to_queue(self.gather_links(page_url))

            self.queue.remove(page_url)
            self.crawled.add(page_url)
            self.update_files()

    def gather_links(self, page_url):
        output = set()
        try:
            re = requests.get(page_url, timeout=5)
            html_content = re.text
            soup = BeautifulSoup(html_content, 'html.parser')
            links = soup.find_all('a')
            for link in links:
                link = link.get('href')
                url = parse.urljoin(page_url, link)
                output.add(url)
        except:
            print('Error: can not crawl page ' + page_url)
            return set()
        return output

    def add_link_to_queue(self, links):
        for url in links:
            if url in self.queue:
                continue
            if url in self.crawled:
                continue
            #if Spider.domain_name not in url:
                #continue
            self.queue.add(url)

    def update_files(self):
        set_to_file(self.queue, self.queue_file)
        set_to_file(self.crawled, self.crawled_file)
