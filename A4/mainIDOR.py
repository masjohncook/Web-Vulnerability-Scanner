import threading
import time
from queue import Queue
from general import *
from configparser import ConfigParser
from A4.trav_attack import TravAttack
from A4.trav_login import TravLogin


class MainIdor:

    def __init__(self, url, dir):
        self.url = url
        self.dir = dir
        self.urlParm = list()
        self.url_login = list()
        self.log = list()
        self.log_csv = list()
        self.queue = Queue()
        self.condition_done = 0

        config = ConfigParser()
        config.read('/opt/asetulweb/config.ini')
        db = str(config.get('settings', 'db'))
        trav = int(config.get('thread', 'trav'))
        self.worker = trav

        self.list_url = file_to_set(self.dir + "/crawled.txt")
        self.db_login = file_to_list(db + "db/db_login.txt")
        self.boot()

    def boot(self):
        header = {
            "User-Agent": "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:69.0) Gecko/20100101 Firefox/69.0",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
            'Accept-Language': "en-US,en;q=0.5"
        }
        self.log.append("result Traversal Attack")
        for url in self.list_url:
            if cek_link_with_parm(url):
                try:
                    re = requests.get(url, timeout=5, headers=header)
                    if re.status_code == 200:
                        self.queue.put(url)
                except:
                    pass

        if not self.queue.empty():
            self.log.append("find " + str(self.queue.qsize()) + " url with parameter")
            self.create_workers()
            while self.condition_done != 0:
                print(self.condition_done)
                time.sleep(5)
        else:
            self.log.append("cant find URL with parameter")

        self.log.append("")
        self.log.append("result Traversal Login")
        for url in self.list_url:
            for login in self.db_login:
                if url.__contains__(login):
                    try:
                        re = requests.get(url, timeout=5, headers=header)
                        if re.status_code == 200:
                            self.url_login.append(url)
                    except requests.exceptions.HTTPError as err:
                        self.log.append(err)
                    except requests.exceptions.RequestException as err:
                        self.log.append(err)
                    break

        if len(self.url_login) > 0:
            for url in self.url_login:
                self.log.append("result : " + url)
                try:
                    det = TravLogin(url)
                    for output in det.return_output():
                        self.log.append(output)
                    for output in det.return_output_csv():
                        self.log_csv.append(output)
                except:
                    self.log.append("Traversal Login - Error")
                self.log.append("")

    def create_workers(self):
        for _ in range(self.worker):
            t = threading.Thread(target=self.trav_attacks)
            t.daemon = True
            t.start()

    def trav_attacks(self):
        while True:
            url = self.queue.get()
            self.condition_done += 1
            try:
                trav = TravAttack(url)
                for output in trav.return_output():
                    self.log.append(output)

                for output in trav.return_output_csv():
                    self.log_csv.append(output)
            except:
                pass
            self.condition_done -= 1
            self.queue.task_done()

    def return_output(self):
        output = self.log
        return output

    def return_output_csv(self):
        output = self.log_csv
        return output
