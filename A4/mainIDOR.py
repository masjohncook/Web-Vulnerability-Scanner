import threading
import time
from queue import Queue
from general import *
from A4.trav_attack import TravAttack
from A4.trav_login import TravLogin


class MainIdor:

    def __init__(self, url, dir):
        self.url = url
        self.dir = dir
        self.urlParm = list()
        self.urlLogin = list()
        self.log = list()
        self.queue = Queue()
        self.worker = 10
        self.condition_done = 0

        self.listUrl = file_to_set(self.dir + "/crawled.txt")
        self.dirLogin = file_to_list("db/db_login.txt")
        self.boot()

    def boot(self):
        self.log.append("result Traversal Attack")
        for url in self.listUrl:
            if cek_link_with_parm(url):
                self.queue.put(url)

        if not self.queue.empty():
            print("find " + str(self.queue.qsize()) + " url with parameter")
            self.log.append("find " + str(self.queue.qsize()) + " url with parameter")
            self.create_workers()
            time.sleep(5)
            while self.condition_done != 0:
                print(self.condition_done)
                time.sleep(5)
        else:
            self.log.append("cant find URL with parameter ")

        self.log.append("")
        self.log.append("result Traversal Login")
        for x in self.listUrl:
            for y in self.dirLogin:
                if x.__contains__(y):
                    re = requests.get(x, timeout=5)
                    if re.status_code == 200:
                        self.urlLogin.append(x)
                    break

        if len(self.urlLogin) > 0:
            for url in self.urlLogin:
                print(url)
                self.log.append("result : " + url)
                try:
                    det = TravLogin(url)
                    for output in det.return_output():
                        self.log.append(output)
                except:
                    self.log.append("Traversal Login - Error")
                self.log.append("")

    def create_workers(self):
        for _ in range(self.worker):
            t = threading.Thread(target=self.trav_attacks)
            t.daemon = True
            t.start()

    def trav_attacks(self):
        while True:
            url = self.queue.get()
            self.condition_done += 1
            print(url)
            try:
                pass
                #trav = TravAttack(url)
                #for output in trav.return_output():
                    #print(output)
                #    self.log.append(output)
            except:
                print("error")
            self.condition_done -= 1
            self.queue.task_done()

    def return_output(self):
        output = self.log
        return output


#MainIdor("192.168.10.8", "test")
