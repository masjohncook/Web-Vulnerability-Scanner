from general import *
import re
import requests
from configparser import ConfigParser
from http.cookies import SimpleCookie


class TravAttack:

    def __init__(self, url):
        self.url = url
        self.log = list()
        self.log_csv = list()

        config = ConfigParser()
        config.read('/opt/asetulweb/config.ini')
        self.db = str(config.get('settings', 'db'))

        self.boot(self.url)

    def boot(self, url):
        vuln = " "
        fullLink = " "
        part = re.split("([^\?]+)(\?.*=)", url)
        list_attack = file_to_set(self.db + "db/db_travelsal.txt")
        list_vuln = file_to_set(self.db + "db/db_trav_vuln.txt")
        berhasil = False
        for list in list_attack:
            fullLink = part[1] + part[2] + list
            req = request()
            req.query(fullLink)
            for find in list_vuln:
                if req.raw.__contains__(find):
                    vuln = list
                    self.log.append("traversal Attack success")
                    berhasil = True
                    break
            if berhasil:
                break

        if berhasil:
            self.log.append(url)
            self.log.append("vulnerabilty with : " + str(vuln))
            self.log.append(" ")
            data = ["Traversal Path Attack", url]
            self.log_csv.append(data)
        else:
            pass

    def return_output(self):
        output = self.log
        return output

    def return_output_csv(self):
        output = self.log_csv
        return output


class request(object):
    def query(self, link, cookie=None):
        header = {
            "User-Agent": "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:69.0) Gecko/20100101 Firefox/69.0",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
            'Accept-Language': "en-US,en;q=0.5"
        }
        if cookie:
            rawdata = "Cookie: " + cookie
            cookie = SimpleCookie()
            cookie.load(rawdata)

        try:
            req = requests.get(link, cookies=cookie, allow_redirects=True, timeout=2, headers=header)
            self.raw = req.text
            self.code = req.status_code
        except:
            return False
