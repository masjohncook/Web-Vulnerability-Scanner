# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'tampilan.ui'
#
# Created by: PyQt5 UI code generator 5.11.3
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import QMessageBox
import shutil
import multiprocessing

from web_crawling.mainCrawl import *
from A1.mainInject import *
from A2.mainBrokAuth import *
from A4.mainIDOR import *
from A5.mainSecMisconf import *


class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(760, 600)
        MainWindow.setAutoFillBackground(False)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 90, 661, 19))
        self.label.setObjectName("label")

        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(20, 30, 571, 19))
        self.label_2.setObjectName("label_2")

        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(20, 150, 571, 19))
        self.label_3.setObjectName("label_3")

        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(20, 110, 721, 27))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit.textChanged.connect(self.ableButton_1)

        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(20, 50, 721, 27))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_2.textChanged.connect(self.ableButton_1)

        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setEnabled(True)
        self.lineEdit_3.setGeometry(QtCore.QRect(20, 170, 611, 27))
        self.lineEdit_3.setFrame(True)
        self.lineEdit_3.setReadOnly(False)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.lineEdit_3.setPlaceholderText(os.getcwd())

        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(20, 300, 721, 211))
        self.textEdit.setObjectName("textEdit")

        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(20, 220, 88, 27))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.setDisabled(True)
        self.pushButton.clicked.connect(self.attack_clk)

        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(120, 220, 88, 27))
        self.pushButton_2.setObjectName("pushButton_2")

        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(220, 220, 88, 27))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.setDisabled(True)
        self.pushButton_3.clicked.connect(self.cancel_clk)

        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(640, 170, 101, 27))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(self.dest_clk)

        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setEnabled(True)
        self.progressBar.setGeometry(QtCore.QRect(20, 260, 721, 23))
        self.progressBar.setAutoFillBackground(False)
        self.progressBar.setProperty("value", 0)
        self.progressBar.setTextVisible(False)
        self.progressBar.setObjectName("progressBar")

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Assessment Tools Web Apps Testing Aplication"))
        self.label.setText(_translate("MainWindow", "Input URL / Ip address target : "))
        self.pushButton.setText(_translate("MainWindow", "Attack"))
        self.pushButton_2.setText(_translate("MainWindow", "Log"))
        self.pushButton_3.setText(_translate("MainWindow", "Cancel"))
        self.label_2.setText(_translate("MainWindow", "Enter your project name :"))
        self.pushButton_4.setText(_translate("MainWindow", "Select folder"))
        self.label_3.setText(_translate("MainWindow", "Folder destination to save your project : (OPTIONAL)"))

    def attack_clk(self):
        self.textEdit.clear()
        self.alamatURL = self.lineEdit.text()
        prName = self.lineEdit_2.text()

        if not self.lineEdit_3.text():
            self.dirFolder = os.getcwd() + "/" + prName
        else:
            self.dirFolder = self.lineEdit_3.text() + "/" + prName

        cek = cek_webserver_link(self.alamatURL)
        if cek is not False:
            if cek != self.alamatURL:
                self.textEdit.append("url redirected to : " + str(cek))
                self.alamatURL = cek
            if os.path.exists(self.dirFolder) is True:
                reply = self.messageBoxYesNo("Warning", "The project you want to save already exists. Do you want to delete it ?")
                if reply is True:
                    self.textEdit.append("Delete Existing Folder")
                    shutil.rmtree(self.dirFolder)
                    if os.path.exists(self.dirFolder) is True:
                        self.showMessageBox("Warning", "can not delete the folder. please cek your folder or file")
                    else:
                        self.make_thread_atk()
                elif reply is False:
                    self.make_thread_atk()
            elif os.path.exists(self.dirFolder) is False:
                self.make_thread_atk()
        else:
            self.showMessageBox("Warning", "Web server is Down or Not Found")

    def cancel_clk(self):
        try:
            self.p.terminate()
            print("proses dibatalkan")
        except:
            pass

        self.pushButton_3.setDisabled(True)
        self.pushButton.setDisabled(False)

    def make_thread_atk(self):
        self.progressBar.setValue(0)
        self.pushButton_3.setDisabled(False)
        self.pushButton.setDisabled(True)

        self.p = multiprocessing.Process(target=self.attack, args=(self.alamatURL, self.dirFolder))
        #self.p = multiprocessing.Process(target=self.test_func)
        self.p.daemon = True
        self.p.run()

    def attack(self, url, path):
        dirFolder = path
        create_project_dir(dirFolder)

        self.textEdit.append("\nCrawling")
        try:
            crawl = MainCrawl(url, dirFolder)
            self.textEdit.append("Link has been crawled : " + crawl.return_output() + "\n")
        except:
            self.textEdit.append("crawling stop or error in middle prossess")
            output = str(len(file_to_list(dirFolder + "/crawled.txt")))
            self.textEdit.append("Link has been crawled : " + output +"\n")
        self.progressBar.setValue((100 * (2 / 6)))

        self.textEdit.append("Injection Attack")
        inject = mainInject(url)
        for output in inject.return_output():
            self.textEdit.append("~" + output)
        self.textEdit.append(" ")
        self.progressBar.setValue((100 * (3 / 6)))

        self.textEdit.append("Broken Authentication Attack")
        A2 = MainBrokAuth(url, dirFolder)
        for output in A2.return_output():
            self.textEdit.append("~" + output)
        self.textEdit.append(" ")
        self.progressBar.setValue((100 * (4 / 6)))

        self.textEdit.append("IDOR Attack")
        A4 = MainIdor(url, dirFolder)
        for output in A4.return_output():
            self.textEdit.append("~" + output)
        self.textEdit.append(" ")
        self.progressBar.setValue((100*(5/6)))

        self.textEdit.append("A5 Attack")
        A5 = mainSecMisconf(url, dirFolder)
        for output in A5.return_output():
            self.textEdit.append("~" + output)
        self.textEdit.append(" ")
        self.progressBar.setValue(100)
        self.textEdit.append("Done")

        self.pushButton_3.setDisabled(True)
        self.pushButton.setDisabled(False)
        try:
            print("proses diberhentikan")
            self.p.terminate()
        except:
            pass

    def test_func(self):
        i = 0
        while i < 10:
            i = i + 1
            time.sleep(3)
            self.textEdit.append("Done")
            print(i)
        # self.pushButton_3.setDisabled(True)
        # self.pushButton.setDisabled(False)

    def dest_clk(self):
        self.folderPath = QtWidgets.QFileDialog.getExistingDirectory()
        self.lineEdit_3.setText(self.folderPath)

    def showMessageBox(self, title, message):
        mesBox = QtWidgets.QMessageBox()
        mesBox.setIcon(QtWidgets.QMessageBox.Warning)
        mesBox.setWindowTitle(title)
        mesBox.setText(message)
        mesBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
        mesBox.exec_()

    def messageBoxYesNo(self, title, message):
        mesBox = QtWidgets.QMessageBox.question(QtWidgets.QMessageBox(), title, message, QMessageBox.Ok | QMessageBox.No, QtWidgets.QMessageBox.No)
        if mesBox == QtWidgets.QMessageBox.Ok:
            return True
        elif mesBox == QtWidgets.QMessageBox.No:
            return False
        mesBox.exec_()

    def ableButton_1(self):
        if len(self.lineEdit.text()) > 0 and len(self.lineEdit_2.text()) > 0:
            self.pushButton.setDisabled(False)
        else:
            self.pushButton.setDisabled(True)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())