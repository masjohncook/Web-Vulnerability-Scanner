# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'tampilan.ui'
#
# Created by: PyQt5 UI code generator 5.11.3
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
from main import *
from general import *
import shutil
from mainInject import *
from mainBrokAuth import *
from mainIDOR import *
from mainSecMisconf import *
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(760, 600)
        MainWindow.setAutoFillBackground(False)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 90, 661, 19))
        self.label.setObjectName("label")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(20, 110, 721, 27))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(20, 50, 721, 27))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(20, 300, 721, 261))
        self.textEdit.setObjectName("textEdit")
        self.textEdit.setPlaceholderText("tets")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(20, 220, 88, 27))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.setDisabled(True)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(120, 220, 88, 27))
        self.pushButton_2.setObjectName("pushButton_2")
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setEnabled(True)
        self.progressBar.setGeometry(QtCore.QRect(20, 260, 721, 23))
        self.progressBar.setAutoFillBackground(False)
        self.progressBar.setProperty("value", 24)
        self.progressBar.setTextVisible(False)
        self.progressBar.setObjectName("progressBar")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(220, 220, 88, 27))
        self.pushButton_3.setObjectName("pushButton_3")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(20, 30, 571, 19))
        self.label_2.setObjectName("label_2")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(640, 170, 101, 27))
        self.pushButton_4.setObjectName("pushButton_4")

        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setEnabled(True)
        self.lineEdit_3.setGeometry(QtCore.QRect(20, 170, 611, 27))
        self.lineEdit_3.setFrame(True)
        self.lineEdit_3.setReadOnly(False)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.lineEdit_3.setPlaceholderText(os.getcwd())
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(20, 150, 571, 19))
        self.label_3.setObjectName("label_3")

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.lineEdit.textChanged.connect(self.ableButton)
        self.lineEdit_2.textChanged.connect(self.ableButton)
        self.pushButton.clicked.connect(self.attack_clk)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def __del__(self):
        # Restore sys.stdout
        sys.stdout = sys.__stdout__

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Assessment Tools Web Apps Testing Aplication"))
        self.label.setText(_translate("MainWindow", "Input URL / Ip address target : (URL website must with http:// or https://) "))
        self.pushButton.setText(_translate("MainWindow", "Attack"))
        self.pushButton_2.setText(_translate("MainWindow", "Log"))
        self.pushButton_3.setText(_translate("MainWindow", "Exit"))
        self.label_2.setText(_translate("MainWindow", "Enter your project name :"))
        self.pushButton_4.setText(_translate("MainWindow", "Select folder"))
        self.label_3.setText(_translate("MainWindow", "Folder destination to save your project : (OPTIONAL)"))

    def attack_clk(self):
        alamatURL = self.lineEdit.text()
        prName = self.lineEdit_2.text()
        if alamatURL[0:8] == "https://" or alamatURL[0:7] == "http://":
            cek = cek_server(get_sub_domain_name(alamatURL))
            if cek == True:
                if os.path.exists(prName):
                    reply = self.messageBoxYesNo("Warning", "The project you want to save already exists. Do you want to delete it ?")
                    if reply == True:
                        try:
                            shutil.rmtree(prName)
                            if os.path.exists(prName):
                                self.showMessageBox("Warning", "can not delete the folder. please cek your folder or file")
                            else:
                                self.nextAttack(alamatURL, prName)
                                #print("Yes")
                        except:
                            self.showMessageBox("Warning", "can not delete the folder. please cek your folder or file")
                    elif reply == False:
                        self.nextAttack(alamatURL, prName)
                        #print("No")
                else:
                    self.nextAttack(alamatURL, prName)
            else:
                self.showMessageBox("Warning", "Server is Down")
        else:
            self.showMessageBox("Warning", "dont contain https:// or http://")

    def nextAttack(self, url, prName):
        self.textEdit.append("Crawling. . . ")
        #MainCrawl(url, prName)
        self.textEdit.append("Injection Attack")
        #mainInject(url)
        self.textEdit.append("Broken Authentication Attack")
        #mainBrokAuth(url, prName)
        self.textEdit.append("IDOR Attack")
        #mainIdor(url, prName)
        self.textEdit.append("Security Misconfiguration Attack")
        #mainSecMisconf

    def showMessageBox(self, title, message):
        mesBox = QtWidgets.QMessageBox()
        mesBox.setIcon(QtWidgets.QMessageBox.Warning)
        mesBox.setWindowTitle(title)
        mesBox.setText(message)
        mesBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
        mesBox.exec_()

    def messageBoxYesNo(self, title, message):
        mesBox = QtWidgets.QMessageBox.question(QtWidgets.QMessageBox(), title, message, QMessageBox.Ok | QMessageBox.No, QtWidgets.QMessageBox.No)
        if mesBox == QtWidgets.QMessageBox.Ok:
            return True
        elif mesBox == QtWidgets.QMessageBox.No:
            return False
        mesBox.exec_()

    def ableButton(self):
        if len(self.lineEdit.text()) > 0 and len(self.lineEdit_2.text()) > 0:
            self.pushButton.setDisabled(False)
        else:
            self.pushButton.setDisabled(True)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

