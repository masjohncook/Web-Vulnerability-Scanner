from robobrowser import RoboBrowser
from bs4 import BeautifulSoup
from general import *
import requests

class DetailedErrorLogin:

    def __init__(self, alamatURL):
        self.url = alamatURL
        self.list_atr = ("id", "class", "name", "action")
        self.atr_form = None
        self.atr_value = None
        self.log = list()

        self.boot()

    def boot(self):
        htmlLogin = self.get_form_login_html(self.url)
        if htmlLogin is not False:
            self.name_input = self.get_input_name(htmlLogin)

            value = None
            for atr in self.list_atr:
                value = self.get_value_atr_form(htmlLogin, atr)
                if value is not None:
                    self.atr_form = atr
                    self.atr_value = value
                    self.attack()
                    break
            if value is None:
                self.log.append("not vulnerability - not found or not have form login")
        else:
            self.log.append("not vulnerability - not found or not have form login")

    def attack(self):
        robo = RoboBrowser(history=True)
        robo.open(self.url)
        if self.atr_form is "id":
            #print("masuk id")
            form = robo.get_form(id=self.atr_value)
        elif self.atr_form is "class":
            #print("masuk class")
            form = robo.get_form(class_=self.atr_value)
        elif self.atr_form is "name":
            #print("masuk name")
            form = robo.get_form(name=self.atr_value)
        elif self.atr_form is "action":
            #print("masuk action")
            form = robo.get_form(action=self.atr_value)
        else:
            self.log.append("Tidak Menemukan Form Login")
            return None

        form[self.name_input[0]].value = "xxxxx');yyyy"
        form[self.name_input[1]].value = "xxxxx');yyyy"
        robo.submit_form(form)
        html_contain = str(robo.parsed)
        # kondisi error yang mengandung data sensitive dengan tidak masih terbatas
        if html_contain.__contains__("Server Error"):
            print(html_contain)
            self.log.append("find improper errors")
        else:
            self.log.append("not vulnerability")


    def get_form_login_html(self, alamatURL):
        r = requests.get(alamatURL, timeout=5)
        login = file_to_list("db/db_login.txt")
        try:
            soup = BeautifulSoup(r.text, 'html.parser')
            forms = soup.find_all('form')
            for form in forms:
                html = str(form)
                for log in login:
                    if html.__contains__(log):
                        return html
                else:
                    return False
            return False
        except:
            return False

    def get_value_atr_form(self, html, atr):
        soup = BeautifulSoup(html, 'html.parser')
        value = soup.find('form').get(atr)
        return value

    def get_input_name(self, html):
        soup = BeautifulSoup(html, 'html.parser')
        value = list()
        for item in soup.find_all('input'):
            try:
                value.append(item['name'])
            except:
                pass
        return value

    def return_output(self):
        output = self.log
        return output


class DetailedError:

    def __init__(self, path):
        self.log = list()
        self.url_401 = set()
        self.url_404 = set()
        self.url_500 = set()
        self.url_503 = set()
        self.listUrl = file_to_set(path + "/crawled.txt")

        self.boot()

    def boot(self):
        for url in self.listUrl:
            try:
                re = requests.get(url, timeout=5)
            except:
                continue
            code = re.status_code
            if code == 401:
                self.url_401.add(url)
            elif code == 404:
                self.url_404.add(url)
            elif code == 500:
                self.url_500.add(url)
            elif code == 503:
                self.url_503.add(url)

        if len(self.url_401) is not 0:
            self.log.append("url with code 401 : " + str(len(self.url_401)))
        if len(self.url_404) is not 0:
            self.log.append("url with code 404 : " + str(len(self.url_404)))
        if len(self.url_500) is not 0:
            self.log.append("url with code 500 : " + str(len(self.url_500)))
        if len(self.url_503) is not 0:
            self.log.append("url with code 503 : " + str(len(self.url_503)))

        sum = len(self.url_401) + len(self.url_404) + len(self.url_500) +len(self.url_503)
        self.log.append("total : " + str(sum))
        if sum == 0:
            self.log.append("not vulnerability - error page not found")

    def return_output(self):
        output = self.log
        return output